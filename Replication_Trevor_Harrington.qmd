---
title: "Replication_Trevor_Harrington"
author: "Trevor Harrington"
format: html
editor: visual
execute: 
  keep-md: TRUE
  code-fold: TRUE
---

```{r setup, include = FALSE}
#Load in any packages you need
library(tidyverse)
library(kableExtra)
library(tidyr)
library(knitr)

#Read in any data

```

# Chapter 1 -- From Statistical Analysis to Bioinformatics

## Introduction: Sampling, Processing, and Analyzing Genomic data

The goal of this notebook is to complete a series of challenges that will lay the foundation for using RStudio to analyze genomic data. By learning how to effectively store objects in variables, build functions to analyze genetic data, and implement "for" loops when necessary, we aim to enhance our ability to analyze and interpret genomic data more efficiently. Through analyzing genomic data with the tools and concepts covered in the course, we will gain a deeper understanding of genetic information and its crucial role in biological processes. Ultimately, our aim is to leave this course with a well-documented online environment that showcases our accomplishments in analyzing genomic data

## Objectives:

-   Use the arrow (\<-) operator to store objects in variables.

-   Build functions to process and analyze genetic data.

-   Create a list of nucleotides

-   Use set.seed() to set a seed for a random number generator to make your results reproducible over time and across different machines (and different researchers too).

-   Use R's sample() function to create a random "genome" for the purpose of testing functions.

-   Use paste() with the parameter setting collapse = "" to collapse your random genome into a single long string of nucleotides.

-   Learn about `for loops` and implement them when necessary.

-   Read in a real bacterial genome from a text file.

-   Use programmatic flow control in the form of if/else if/else statements to run code only when a particular condition is satisfied.

-   Solve a bioinformatics problem on the Rosalind platform.

------------------------------------------------------------------------

### Challenge 1: Generate a Random List of DNA Nucleotides

```{r}
# create a new variable containing a vector of four characters for the four nucleotide abbreviations (Adenine, Cytosine, Guanine, Thymine) 
## Vector is  a one-dimensional array-like object that can contain values of the same basic type of data (numerical,character,logical)
nt_names <- c("A", "T", "G", "C")

nt_names # simply displays the vectors without organizing

```

------------------------------------------------------------------------

### Challenge 2: Generate 15 Character String of Nucleotides

```{r}
set.seed(215)

# `sample` function used to generate a random sample of nucleotides from the nucleotides (nt_name) vector. The `size` argument specifies the number of samples to generate (15)  
##`replace = TRUE` indicates sample should be replaced in the pool after being selected (same nucleotide can appear multiple times in the sample)
## nt_sample calls on vector generated in challenge 1 and stored in the environment
rnd_genome <- sample(nt_names, size = 15, replace = TRUE)

paste(rnd_genome, collapse = "")

```

------------------------------------------------------------------------

### Challenge 3: Generating a Randomized 1500 Nucleotide-Long Dataset

```{r}
# create a new variable containing a vector of four characters for the four nucleotide abbreviations (Adenine, Cytosine, Guanine, Thymine) 
## Vector is  a one-dimensional array-like object that can contain values of the same basic type of data (numerical,character,logical)
nt_names <- c("A", "T", "G", "C")

# generate a new value representing the number of nucleotides that will be randomly generated for this dataset
##This step is not required (numerical value can be used in 'sample') but it is better to call on a value then hard code one into a function. More flexible when df is larger
nt_num <- 1500


# for reproducibility, using the same seed each time means the "randomness" can be recreated.
set.seed(215)


#'sample' function randomly picks variables from nt_names vector to generate a new vector n length, in this case n = nt_num (1500)
nt_sample <- sample(nt_names, size = nt_num, replace = TRUE)

# 'paste' combines the individual nucleotides into a single string rather then a list of individual letters
# 'collapse' removes the seperator generated between each nucleotide as a result of the 'sample' function interavting with the nucleotides.
paste(nt_sample, collapse = "")
```

------------------------------------------------------------------------

### Challenge 4: Counting each DNA Nucleotide in a Randomized Dataset and using Loop()

#### Generating a 100-nucleotide strand and counting each frequency

```{r}
# Set a seed value to ensure that the random numbers generated are reproducible
set.seed(215)

# Generate a random genome sequence of length 100 by sampling (with replacement) from the nucleotide abbreviation vector still in the environment
rnd_genome <- sample(nt_names, size = 100, replace = TRUE)

# 'table' function counts the frequency of each vector (nucleotide) in the random genome sequence and generates a table of the results 
table(rnd_genome)
```

#### Using Loop() function to repeat an operation

-   `for loop` functions are widely used and incredibly versatile for repeating an operation with minimal inputs.

```{r}
# Create 'loop_result' variable used to store the values being added in each iteration of the loop.
## loop is initialized to 0 (or whatever value entered for 'loop_result') and then incremented by the current value of i (and the function applied to the loop) in each iteration of the loop
loop_result <- 0

# for loop is a control flow statement in programming that allows you to execute a block of code repeatedly.
## The loop consists of an initialization statement, a test condition, an update statement, and a loop body. In this code
## Here, a loop is used to iterate over a sequence of values from 1 to 10, adding the value 'i' for each iteration.
for(i in 1:10){
  loop_result <- loop_result + i
  print(loop_result)
}
```

------------------------------------------------------------------------

### Challenge 5: Using loop() functions

```{r}
#initialize a new dataframe with a value of 1
myProduct <- 1

# Use "for loop" to iterate (multiply) myProduct by values of j(1-15)
##kind of confusing, but the iteration variable "j" 
for(j in 1:15) {
  myProduct <- myProduct * j   # Update myProduct by multiplying with j
  print(myProduct)            # Print the updated value of myProduct
}
```

------------------------------------------------------------------------

### Challenge 6: Combining sample(), paste() and loop() functions to produce a set of individual nucleotides

#### Generating Random Genomic Data in a collapsed string

```{r}
nt <- c("A", "C", "G", "T")
genomeLength <- 10

set.seed(215)
rnd_genome <- paste(
  sample(nt, size = genomeLength, replace = TRUE),
                   collapse = "")
print(rnd_genome)
```

#### Counting Adenine using loop() function with If/else statements

```{r}
# "For loop" is used to perform iterations 1:n where n (nchar) refers to the number of characters (variables, nucleotides) in the rnd_genome dataset
for(i in 1:nchar(rnd_genome))
  {
    print(str_sub(rnd_genome, start = i, end = i))
  }

```

### Challenge 7: Modifying Output to sum the For Loop() Results Output

```{r}
# Set a variable called `sum_A` equal to 0
sum_A <- 0

# Use a for loop to iterate over each character in the `rnd_genome` variable
for (i in 1:nchar(rnd_genome)) {
  # # String subset is checked for each iteration, start = i and end = i means this substring will only extract a single character, i, for each iteration
  ## == "A" checks each substring, and only extracts A for each nucleotide in the datafrom
  if (str_sub(rnd_genome, start = i, end = i) == "A") {
    # If it is, add 1 to the `sum_A` variable
    sum_A <- sum_A + 1
  }
}

# Create a named vector called `result` with one element, the number of adenine bases found
result <- c("Adenine:" = sum_A)

# Use the `print` function to output the `result` vector to the console
print(result)

```

```{r}
sum_A <- 0  # Create a new variable to store sum of "A" characters extracted from the loop

for(i in 1:nchar(rnd_genome)) {
  if(str_sub(rnd_genome, start = i, end = i) == "A") {
    sum_A <- sum_A + 1   # Adds 1 to sum_A variable when a iterations passes the if "A" statement
  }
}

cat("Total number of Adenisine Nucleotides: ", sum_A)  # Print the final value of sum_A using cat() "concatenate and print" function to merge the output of sum_A
## Without cat(), print() produces two lines

```

### Challenge 8: Adding the remaining nucleotides to the count

```{r}
# Initialize count variables for each nucleotide to 0
sum_A <- 0
sum_C <- 0
sum_G <- 0
sum_T <- 0

# Loop through each character in the random genome sequence
for(i in 1:nchar(rnd_genome)) {
  # Check if the character is "A", "C", "G", or "T", and increment the corresponding count variable if it is
  ##'str_sub' substring function allows each vector in the variable to be checked and summed independent of the other vectors in the string
  ##'start = i' and 'end = i' is starting at position i and ending at position i for each iteration extracting the "i-th" character of the string, which is then compared to the nucleotide letters A, C, G, and T and added to the count.
  if(str_sub(rnd_genome, start = i, end = i) == "A") {
    sum_A <- sum_A + 1}
  if(str_sub(rnd_genome, start = i, end = i) == "C") {
    sum_C <- sum_C + 1}
  if(str_sub(rnd_genome, start = i, end = i) == "G") {
    sum_G <- sum_G + 1}
  if(str_sub(rnd_genome, start = i, end = i) == "T") {
    sum_T <- sum_T + 1}
}

# Create a named vector of the counts for each nucleotide
result <- c("Adenine:" = sum_A, "Cytosine:" = sum_C, "Guanine:" = sum_G, "Thymine:" = sum_T)

# Print the results
print(result)

```

# Understanding the biology -- DNA Replication Lecture

## Useful Terminology

-   Scales of genetic data; genome -\> Chromosome -\> Gene -\> Nucleotide

    -   Humans have 23 pairs of chromosomes

    -   Bacteria have a single looping strand containing all of their genetic data

        -   Bacteria also contain small, circular DNA molecules called **Plasmids**, used for storing additional data and conjugation/cloning

-   **Complementary base pairing:** A & T + C & G

    -   antiparellel strands: DNA always read from **5' -\> 3'**

    -   DNA strand = phosphate group + hydroxyl (sugar) group + base group (A,C,G,T)

        -   Sugar-Phosphate backbone: creates the 5' -\> 3' rule (placement of carbon in sugar)

        -   base pairs held together by matching **Hydrogen bonds.**

-   **DNA Polymerase:** Along with a number of other enzymes used to read and create a RNA copy of the DNA.

    ## **Origins of Replication**

    shorts sequences of genes that can be read to initiate the reading of a gene.

-   Many origins of replication in the human genome, where genes are constantly being replicated

-   Bacteria (tend to) only have a single origin of replication that travels in both directions

    -   **DnaA Boxes:** specific bacterial marker that identifies the origin for enzymes to begin replication

        -   specific sequence used to initiate a DnaA box

------------------------------------------------------------------------

```{r}
vib_c <- scan("C:/School/23SPDAY/Biostatistics/Group_Project/Genomes/VibrioCholerae.txt", what = "character", sep = NULL)
```

```{r}
sum_A <- 0
sum_C <- 0
sum_G <- 0
sum_T <- 0

for(i in 1:nchar(vib_c)) {
  if(str_sub(vib_c, start = i, end = i) == "A") {sum_A <- sum_A + 1}
  if(str_sub(vib_c, start = i, end = i) == "C") {sum_C <- sum_C + 1}
  if(str_sub(vib_c, start = i, end = i) == "G") {sum_G <- sum_G + 1}
  if(str_sub(vib_c, start = i, end = i) == "T") {sum_T <- sum_T + 1}
}

result <- c("Adenine:" = sum_A, "Cytosine:" = sum_C, "Guanine:" = sum_G, "Thymine:" = sum_T)
print(result)

```

------------------------------------------------------------------------

### Rosalind Testing Data

```{r}
rosalind_string <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
```

```{r}
sum_A <- 0
sum_C <- 0
sum_G <- 0
sum_T <- 0

for(i in 1:nchar(rosalind_string)) {
  if(str_sub(rosalind_string, start = i, end = i) == "A") {sum_A <- sum_A + 1}
  if(str_sub(rosalind_string, start = i, end = i) == "C") {sum_C <- sum_C + 1}
  if(str_sub(rosalind_string, start = i, end = i) == "G") {sum_G <- sum_G + 1}
  if(str_sub(rosalind_string, start = i, end = i) == "T") {sum_T <- sum_T + 1}
}

paste(sum_A,sum_C,sum_G,sum_T)
```

-   This result matches the key provided on the website, so I assume that this code is effective!

------------------------------------------------------------------------

# Chapter 2: Bioinformatic Tools pt. 2

## Introduction: Improving Tools and Efficiency

-   Genomes are large, and it is important that the tools for analyzing them are used properly to both validate that the results are accurate, and that as few unnecessary steps as possible are made since they will be time consuming when working with a large string of nucleotides.

## Objectives:

-   Learn to eliminate "single-use code" by encapsulating code in functions which can be easily applied to different genomes.

-   Expand your ability to count the frequency of each individual nucleotide within a genome to an ability to count the appearance of patterns in the genome.

-   Build and execute functions to find "hidden messages" within the genome by identifying patterns appearing much more often than they would be expected to if a genome included nucleotides at random.

-   Exploit transcription errors to narrow a search region for the replication origin.

------------------------------------------------------------------------

### Challenge 0: Generating Functions for Functions

```{r}
nucleotide_frequency <- function(genomeString, nucleotide = "A"){
  count <- 0
  for(i in 1:nchar(genomeString)){
    if(str_sub(genomeString, start = i, end = i) == nucleotide){
      count <- count + 1
    }
  }
  return(count)
}

nucleotide_frequency("ACTTGCGGGTATCGAG", "G")
```

------------------------------------------------------------------------

### Challenge 1: Using the Function Function on a Randomized Genome

```{r}
nt_sample <- sample(nt_names, size = 2000, replace = TRUE)
nt_sample <- paste(nt_sample, collapse = "")
```

```{r}

nucleotide_frequency(nt_sample, "C")
```

-   23.8% of the nucleotides in this randomized dataset are cytosines

    -   code is random, but this character

### Generating a function to create randomized genome

```{r}
rnd_genome <- function(k = 1000){
    sample(nt_names, size = k, replace = TRUE)
}
rnd_genome <- paste(rnd_genome, collapse = "")

```

#### From single-vector multiple-vector Substrings

```{r}

string_sample <- c()
# subset strings exctract a value based on the 
string_sample <- string_sample %>% 
  append(str_sub(nt_sample, start = 1000, end = 1005))

# Negative vector position indicated the position to start and end from is being measured starting at the end of the dataset
# When data from variables is added to a substring, they are removed and cannot be added to a new substring that overlaps it
str_sub(nt_sample, start = -1000, end = -995)
```

#### Appending a new list containing a substring of nucleotides

```{r}
# 'append' is useful for generating a reusable variable containing a vector that can be called back for later tests
string_sample <- c()
# subset strings exctract a value based on the 
string_sample <- string_sample %>% 
  append(str_sub(nt_sample, start = 1000, end = 1005))

string_sample

```

#### Using multiple-vector substrings to generate paired nucleotides in a dataset

```{r}
generate_2_mer <- function(string_sample) {
  list_codon <- c()

  for(i in 1:(nchar(string_sample) - 1)){
  list_codon <- list_codon %>%
  append(str_sub(string_sample, start = i, end = i + 1))
    }
  return(list_codon)
}

generate_codon(string_sample)
```

### Using multiple-vector substrings to generate codons in a dataset

```{r}
generate_codon <- function(string_sample) {
  list_codon <- c()

  for(i in 1:(nchar(string_sample) - 2)){
  list_codon <- list_codon %>%
  append(str_sub(string_sample, start = i, end = i + 2))
    }
  return(list_codon)
}

generate_codon(string_sample)
```

```{r}
generate_k_mer <- function(string_sample, k = 3) {
  list_codon <- c()
  #k is string length 

  for(i in 1:(nchar(string_sample) - k)){
  list_codon <- list_codon %>%
  append(str_sub(string_sample, start = i, end = i + k-1))
    }
  return(list_codon)
}

generate_codon(string_sample, k = 1)
```

```{r}

generate_k_mer(rnd_genome(k = 3),k = 3)

```
