---
title: Group 1
author: Jennessa Brunette
format: html
execute:
  keep-md: true
---


# Intro:

In this notebook we will be searching for the replication origin by encapsulating code in functions and expanding on single-use code to apply to different genomes. During DNA replication, the proteins involved in replication must locate specific patterns when replication begins, so we will be looking at writing a program that can do just this.

# Challenge 1: listing the 4 nucleotides


```{r}
nucleotides <- c("Adenine", "Cytosine", "Guanine", "Thymine")

nucleotides

```


The four nucleotides involved in DNA replication are Adenine, Guanine, Thymine and Cytosine.

# Challenge 2: Generating random string of 15 nucleotides


```{r}
# create a new dataframe with two columns
nt_abr <- c("A", "T", "G", "C")
nt_num <- 15
nt_sample <- sample(nt_abr, size = nt_num, replace = TRUE)

paste(nt_sample, collapse = "")

```


This is a string of 15 nucleotides that was generated randomly using code.

# Challenge 3: Generating random 1500 nucleotide string


```{r}
# create a new dataframe with two columns
nt_abr <- c("A", "T", "G", "C")

# generate a new value representing the number of nucleotides being randomly created for this dataset
nt_num <- 1500

set.seed(215) # for reproducibility, using the same seed each time means the "randomness" can be recreated.
nt_sample <- sample(nt_abr, size = nt_num, replace = TRUE)
paste(nt_sample, collapse = "")
```


Here we generated a much longer randomized string of 1500 nucleotides using code.


```{r}
set.seed(215)
genomeLength <- 1500

randGenome <- sample(nucleotides, size = genomeLength, replace = TRUE)

randGenome <- paste(randGenome, collapse = "")
```

```{r setup, include = FALSE}
#Load in any packages you need
library(tidyverse)

#Read in any data

```


# Challenge 4: Generating random genome using "set.seed"


```{r}
# create a new dataframe with two columns
nt_abr <- c("A", "C", "G", "T")

set.seed(777) # for reproducibility
rnd_genome <- sample(nt_sample, size = 100, replace = TRUE)
table(rnd_genome)
```


This function show us how many of each nucleotide we have in our random genome string.

# Looping with "for" loops


```{r}
mySum <- 0

for(i in 1:10){
  mySum <- mySum + i
  print(mySum)
}
```


A for loop allows us to run a set of instructions over and over. We set an interator for the for loop to run through which was set through values 1 through 10. Thus, we see 10 values.

# Challenge 5: Using "myproduct" & creating loop


```{r}
myProduct <- 1
for(j in 1:15) {
  myProduct <- myProduct * j  
  print(myProduct)            
}
```


The Myproduct was updated by multiplying "myproduct" from "j" and printing the results

# Challenge 6: Generate random genome of 10 nucleotides & using loop


```{r}
nt <- c("A", "C", "G", "T")
genomeLength <- 10

set.seed(215)
rnd_genome <- paste(
  sample(nt, size = genomeLength, replace = TRUE),
                   collapse = "")
print(rnd_genome)
```


Here we used a forloop to print out nucleotides in a random string of 10.

# Challenge 7: Using Loop to Adapt \# of Occurences of Adenine


```{r}
randGenome
randGenome <- paste(randGenome, collapse = (""))
                    
Adenine_count <- 0
  
  #nchar: number of characters

for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start =i, end =i) =="A"){
    Adenine_count <- Adenine_count + 1
  }
}
print(Adenine_count)
                     
                   
                   
```


Here the loop detected 1 Adenine and we can see there is only 1 Adenine in the sequence so we know this is correct.

# Challenge 8: Using loop to count other nucleotides


```{r}
randGenome
randGenome <- paste(randGenome, collapse = (""))
Thymine_count <- 0
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start =i, end =i) =="T"){
    Thymine_count <- Thymine_count + 1
  }
}
print(Thymine_count)
```


The loop worked for Thymine as well, we can tell there is 1 Thymine in the nucleotide sequence.


```{r}
randGenome
randGenome <- paste(randGenome, collapse = (""))
Cytosine_count <- 0
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start =i, end =i) =="C"){
    Cytosine_count <- Cytosine_count + 1
  }
}
print(Cytosine_count)
```


There are 9 Cytosine found in the loop which correlates to the 9 cytosine shown in the sequence.


```{r}
randGenome
randGenome <- paste(randGenome, collapse = (""))
Guanine_count <- 0
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start =i, end =i) =="G"){
    Guanine_count <- Guanine_count + 1
  }
}
print(Guanine_count)
```


There are 4 Guanine found in the loop which correlates to the 4 Guanine shown in the sequence.

# Challenge 9: Vibrio *Cholerae Chromosome*


```{r}
vib_c <- scan("/Users/jennessabrunette/Documents/VirbrioCholerae.txt", what = "character", sep = NULL)
```

```{r}
sum_A <- 0
sum_C <- 0
sum_G <- 0
sum_T <- 0

for(i in 1:nchar(vib_c)) {
  if(str_sub(vib_c, start = i, end = i) == "A") {sum_A <- sum_A + 1}
  if(str_sub(vib_c, start = i, end = i) == "C") {sum_C <- sum_C + 1}
  if(str_sub(vib_c, start = i, end = i) == "G") {sum_G <- sum_G + 1}
  if(str_sub(vib_c, start = i, end = i) == "T") {sum_T <- sum_T + 1}
}

result <- c("Adenine:" = sum_A, "Cytosine:" = sum_C, "Guanine:" = sum_G, "Thymine:" = sum_T)
print(result)
```


# Challenge 10: Rosalind


```{r}
rosalind_string <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
```

```{r}
sum_A <- 0
sum_C <- 0
sum_G <- 0
sum_T <- 0

for(i in 1:nchar(rosalind_string)) {
  if(str_sub(rosalind_string, start = i, end = i) == "A") {sum_A <- sum_A + 1}
  if(str_sub(rosalind_string, start = i, end = i) == "C") {sum_C <- sum_C + 1}
  if(str_sub(rosalind_string, start = i, end = i) == "G") {sum_G <- sum_G + 1}
  if(str_sub(rosalind_string, start = i, end = i) == "T") {sum_T <- sum_T + 1}
}

paste(sum_A,sum_C,sum_G,sum_T)
```

```{r}
vib_c
vib_c <- paste(vib_c, collapse = "")

Adenine_count <- 0

#nchar: number of characters

for(i in 1:nchar(vib_c)){
if(str_sub(vib_c, start = i, end = i) == "A"){
Adenine_count <- Adenine_count + 1
}
}
Cytosine_count <- 0

for(i in 1:nchar(vib_c)){
if(str_sub(vib_c, start = i, end = i) == "C"){
Cytosine_count <- Cytosine_count + 1
}
}

Thymine_count <- 0

for(i in 1:nchar(vib_c)){
if(str_sub(vib_c, start = i, end = i) == "T"){
Thymine_count <- Thymine_count + 1
}
}

Guanine_count <- 0

for(i in 1:nchar(vib_c)){
if(str_sub(vib_c, start = i, end = i) == "G"){
Guanine_count <- Guanine_count + 1
}
}
print(Adenine_count)
print(Cytosine_count)
print(Thymine_count)
print(Guanine_count)
```


# Origin of Replication: Getting Started


```{r}
nucleotide_frequency <- function(genomeString, nucleotide = "A"){
  count <- 0
  for(i in 1:nchar(genomeString)){
    if(str_sub(genomeString, start = i, end = i) == nucleotide){
      count <- count + 1
    }
  }
  return(count)
}

nucleotide_frequency("ACTTGCGGGTATCGAG", "G")
```


Here we defined a function

# Challenge 1: Random genome of 2000 nucleotides


```{r}
nt_sample <- sample(nt, size = 2000, replace = TRUE)
nt_sample <- paste(nt_sample, collapse = "")

nucleotide_frequency(nt_sample, "C")
```


Here this function counted the number of cytosines, we can see there were 518 cytosines counted out of the random nucleotide sequence of 2000.

# Challenge 2: Using rand_genome function to generate single string


```{r}
k <- 2000
nt_sample <- sample(nt, size = k, replace = TRUE)
nt_sample <- paste(nt_sample, collapse = "")
```

```{r}
rand_genome <- function(k){
  nt_sample <- sample(nt, size = k, replace = TRUE)
  nt_sample <- paste(nt_sample, collapse = "")
  return(nt_sample)
}
rand_genome(10)
```


Generating random genome of 57 nucleotides to use


```{r}
rand_genome(57)
```


Generating single string to use for k


```{r}
myString <- c()
string_sample <- string_sample %>% 
  append(str_sub(nt_sample, start = 1000, end = 1005))
str_sub(nt_sample, start = -1000, end = -995)
```


Appending new list containing a substring of nucleotides


```{r}
string_sample <- c()
string_sample <- string_sample %>% 
  append(str_sub(nt_sample, start = 1000, end = 1005))

string_sample
```


# Using negative integers to indicate start/ end.


```{r}
myString <- "Jennessa"
#Initialize an empty vector
myList <- c()

#Append (add to the end) the first set of two characters to myList
myList <- myList %>%
  append(str_sub(myString, start = 1, end = 2))
#Append the second set of two characters to myList
myList <- myList %>%
  append(str_sub(myString, start = -2, end = -1))

#Print out the contents of myList
myList
```


# Challenge 3: Generating 3-mers


```{r}
myString <-rand_genome(15)
generate_3_mers <- function(myString) {
  list_3_mers <- c()

  for(i in 1:(nchar(myString) - 2)){
  list_3_mers <- list_3_mers %>%
  append(str_sub(myString, start = i, end = i + 2))
    }
  return(list_3_mers)
}
myString
generate_3_mers(myString)


```


This function collected a list of 3mers. It produced a string of 15 nucleotides and twelve pairs of 3mers.

# Challenge 4:


```{r}
generate_k_mer <- function(string, k = 3) {
  list_codon <- c()

  for (i in seq(1, nchar(string) - k + 1, by = k)) {
    list_codon <- list_codon %>%
      append(str_sub(string, start = i, end = i + k - 1))
  }
  
  return(list_codon)
}

generate_k_mer(rand_genome(9))
```


This function returned a list of all k-mers in the genome string. Some noticeable repeats were G and C in the first two pairs of 3-mers.


```{r}
count_pattern <- function(myString, pattern){
  count<- 0
  k <- nchar(pattern)
  for(i in 1:nchar(myString)){
    if(str_sub(myString, start = i, end = i+k-1) == pattern){
      count = count + 1
    }
  }
  return(count)
}
 myGenome <- rand_genome(15)
 myGenome
 
count_pattern(myGenome, "GCATCC")
```


This function allowed me to see that there are 1 "GCATCC" nucleotides in my generated genome string. This function can be changed to see whatever letter combination of nucleotides of your choosing.

# Challenge 5: Count Pattern & Rosalind string


```{r}
count_patterns <- function(string, pattern) {
  count_matches <- 0
  
  for (i in seq(1,nchar(string))){
    if(str_sub(string, i, i + str_length(pattern)-1) == pattern){
      count_matches = count_matches + 1
  }
  }
  return(count_matches)
}

 myGenome <- rand_genome
count_patterns(rand_genome(20000), "CTG")
```

```{r}
rosalind_string <- "TTAGTCCCCAGTCCCCAGTCCCCTCCAGTCCCCGCAGTCCCCCAGTCCCCAGTCCCCCAGTCCCCAGTCCCCAGTCCCCAGCCAGTCCCCACCGGTGTGGTAGTCCCCCAAGTCCCCAAGTCCCCAGTGATAACAGTCCCCTTCTCTAAGTCCCCAGTCCCCGAGTCCCCAGTTGAGTCCCCCTAGTCCCCGCCTATAGTCCCCCCACGAGTCCCCTGAAGTCCCCTGAAAGTCCCCCTGACGCAAGTCCCCTAGTCCCCCAGTCCCCAGAAGTCCCCCAGTCCCCTAAGTCCCCTAGAGTCCCCAGTCCCCGAGAGTCCCCTGTAAGTCCCCCTCAGTCCCCGGCTCGAGTCCCCGATGAGTCCCCGAGTCCCCCCGAGTCCCCGGTTAGTCCCCAAGTCCCCGAGTCCCCGAGTCCCCTGAAGTCCCCGAGTCCCCTCGAGTCCCCAGTCCCCGCTAGTCCCCCTTAGTCCCCAGTCCCCGAGTCCCCAGTCCCCAGTCCCCAAGTCCCCCGTGGAGAAGTCCCCGCAGTCCCCAGTCCCCTCGATTAGTCCCCATGCGATAGTCCCCCAGTCCCCTGAGTCCCCAGTCCCCAAGTCCCCGTTAGTCCCCGAGTCCCCAAAATTAGTCCCCGAAGTCCCCCCGTAGTCCCCTGTGAGTCCCCGAGTCCCCAGTCCCCTTACGAGTCCCCGTCCAGTCCCCTGATTATATGAGAGTCCCCTTGGAGTCCCCTAGTCCCCTAAGTCCCCAGAGTGATTCTTAGTCCCCAAGTCCCCAGTCCCCGCTAGTCCCCATAGTCCCCAGTCCCCCGCAGTCCCCCTACCTCAGTCCCCAAGTCCCCCAGTCCCCCAGTCCCCGGTATTAGTCCCCGAAGTCCCCGAGTCCCCATACTCAAGTCCCCCAGTCCCCGGATGGTAGAGTCCCCAGTCCCCTAGTCCCCCCGAGTCCCCAGTCCCCCAGTCCCCACGGCGGCTAAAGTCCCCTAGTCCCCAGTCCCCGATGCAGTCCCCAAGTCCCCAGTCCCC"
count_patterns(rosalind_string, "AGTCCCCAG")
```


Here we can see the code detected the pattern 25 times and the function works.

# Origin Part II

# challenge 1: Most frequent kmers in string


```{r}
find_frequent_kmers <- function(genome, k){
  #Get the k mers
  kmers <-generate_k_mer(genome, k)
  kmers <- unique(kmers)
  #count occurences
  kmer_counts <- rep(0, length(kmers))
  for(i in 1: length(kmers)){
    kmer_counts[i]<- count_pattern(genome, kmers[i])
  }
  #largest count
  max_freq <- max(kmer_counts)
  print(max_freq)
  freq_kmers <- kmers[kmer_counts==max_freq]
  return(freq_kmers)
}

```

```{r}
myGenome <- rand_genome(10)
find_frequent_kmers(myGenome, 2)
find_frequent_kmers("AAATAAAG", 3)
```


Here my function returned a list of 3 kmers from the sequence AAATAAAG.

# Challenge 2: Reverse- Complement


```{r}
reverse_complement <- function(genomeSubString){
  complement = c('A' = 'T', 'C' = 'G', 'G' = 'C', 'T' = 'A')
  reverse_complement <- ''
  for (nucleotide in rev(strsplit(genomeSubString, "")[[1]])){
    reverse_complement <- paste(reverse_complement,complement[nucleotide], sep="")
  }
  return(reverse_complement)
}
reverse_complement("ATTG")
                         
```


Here we used the reverse complement function to return a nucleotide sequence that was complementary to the original sequence.

# Challenge 3- Part 1: Implement Clump Finding


```{r}
initialize_k_mer_dict <- function(k){
  
  nucleotides <- c("A", "C", "G", "T")

  k_mers_dict <- expand.grid(rep(list(nucleotides), k)) %>%
    unite("k_mers", everything(), remove = TRUE, sep = "") %>%
    unique() %>%
    mutate(count = 0)
  
  return(k_mers_dict)
}

k_mers_dict <- initialize_k_mer_dict(9)

```

```{r}
initialize_k_mer_dict(3)
```


Generating kmers_dict function gives us a table of all possible kmer combinations, L is window length, k is kmer length, t is a frequency threshold


```{r}
clump_finding <- function(genome, L, k, t) { 
  kmer_dict <- initialize_k_mer_dict(k)
  ng <-nchar(genome)
  
  initial_window <- str_sub(genome, start=1, end=L)
  my_kmer_dict <-initialize_k_mer_dict(k)
  
  for(i in 1: L - ( k- 1)){ 
    curr_kmer <- str_sub(initial_window, i, i + (k -1))
    curr_count <- count_patterns(initial_window, curr_kmer)
    curr_row <-which(my_kmer_dict$k_mer ==curr_kmer)
    kmer_dict$count[curr_row] <-curr_count
  }
   candidates <- kmer_dict %>%
    filter(count >= t) %>%
    pull(k_mers)
   
for(j in 2:(ng - (L - 2))){
  rem_pattern <- str_sub(genome, j - 1, j - 1 + (k - 1))
  add_pattern <-str_sub(genome, j + (L - 2) - (k - 1), j + (L - 2))
   
  rem_row <- which(kmer_dict$k_mers == rem_pattern)
  add_row <- which (kmer_dict$k_mers == add_pattern)
  
  kmer_dict$count[rem_row] <- kmer_dict$count[rem_row] - 1
  kmer_dict$count[add_row] <-kmer_dict$count[add_row] + 1
  
  if(kmer_dict$count[add_row] >= t){
    candidates <-append(candidates, add_pattern)
    candidates <- unique(candidates)
  }
}
  return(candidates)
}

my_genome <- rand_genome(200000)
clump_finding(my_genome, 300, 3, 5)
```


Here we printed 3kmers in a genome of 300 nucleotides.

j is an iterator here, so r knows the difference.

This code is still too slow to run on the E.coli genome but it is functional.

# 

